// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT ·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff  // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET
_isspace:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	MOVB $1, AX
	CMPB DI, $13
	JE LBB0_3
	CMPB DI, $32
	JNE LBB0_2
LBB0_3:
	MOVBLZX AX, AX
	BYTE $0x5d  // popq         %rbp
	RET
LBB0_2:
	ADDB $-9, DI
	CMPB DI, $2
	SETCS AX
	MOVBLZX AX, AX
	BYTE $0x5d  // popq         %rbp
	RET
_u32toa_small:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	MOVL SI, AX
	IMUL3Q $1374389535, AX, AX
	SHRQ $37, AX
	LEAQ 0(AX)(AX*1), DX
	WORD $0xc06b; BYTE $0x64  // imull        $100, %eax, %eax
	MOVL SI, CX
	SUBL AX, CX
	ADDQ CX, CX
	CMPL SI, $1000
	JB LBB1_2
	LONG $0x60058d48; WORD $0x0000; BYTE $0x00  // leaq         $96(%rip), %rax  /* _Digits(%rip) */
	MOVB 0(DX)(AX*1), AX
	MOVB AX, 0(DI)
	MOVL $1, AX
	JMP LBB1_3
LBB1_2:
	XORL AX, AX
	CMPL SI, $100
	JB LBB1_4
LBB1_3:
	MOVL DX, DX
	ORQ $1, DX
	LONG $0x40358d48; WORD $0x0000; BYTE $0x00  // leaq         $64(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(DX)(SI*1), DX
	MOVL AX, SI
	ADDL $1, AX
	MOVB DX, 0(DI)(SI*1)
LBB1_5:
	LONG $0x2e158d48; WORD $0x0000; BYTE $0x00  // leaq         $46(%rip), %rdx  /* _Digits(%rip) */
	MOVB 0(CX)(DX*1), DX
	MOVL AX, SI
	ADDL $1, AX
	MOVB DX, 0(DI)(SI*1)
LBB1_6:
	MOVL CX, CX
	ORQ $1, CX
	LONG $0x16158d48; WORD $0x0000; BYTE $0x00  // leaq         $22(%rip), %rdx  /* _Digits(%rip) */
	MOVB 0(CX)(DX*1), CX
	MOVL AX, DX
	ADDL $1, AX
	MOVB CX, 0(DI)(DX*1)
	BYTE $0x5d  // popq         %rbp
	RET
LBB1_4:
	XORL AX, AX
	CMPL SI, $10
	JAE LBB1_5
	JMP LBB1_6
_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430  // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231  // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032  // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832  // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633  // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434  // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235  // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036  // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836  // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637  // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438  // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239  // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639  // .ascii 8, '96979899'

TEXT ·__isspace(SB), NOSPLIT | NOFRAME, $0 - 16
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_isspace:
	MOVQ ch+0(FP), DI
	CALL ·__native_entry__+13(SB)  // _isspace
	MOVQ AX, ret+8(FP)
	RET

_stack_grow:
	CALL runtime·morestack_noctxt<>(SB)
	JMP  _entry

TEXT ·__u32toa_small(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_u32toa_small:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL ·__native_entry__+52(SB)  // _u32toa_small
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtime·morestack_noctxt<>(SB)
	JMP  _entry
